/**
 *@Generated by sagacity-quickvo 4.13
 */
package com.sagframe.sqltoy.showcase.vo.base;

import java.io.Serializable;
import org.sagacity.sqltoy.config.annotation.Entity;
import org.sagacity.sqltoy.config.annotation.Id;
import org.sagacity.sqltoy.config.annotation.Column;
import java.math.BigInteger;


/**
 * @project sqltoy-showcase
 * @version 1.0.0
 * Table: sqltoy_test 
 * pk_constraint only for postgresql  
 */
@Entity(tableName="sqltoy_test")
public abstract class AbstractTestVO implements Serializable,
	java.lang.Cloneable {
	 /*--------------- properties string,handier to copy ---------------------*/
	 //full properties 
	 //id,name,sallary
	 
	 //not null properties
	 //id,name,sallary

	/**
	 * 
	 */
	private static final long serialVersionUID = 4864485190177261973L;
	
	@Column(name="id",length=1L,type=java.sql.Types.BIT,nullable=false)
	protected Boolean id;
	
	@Column(name="name",length=100L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String name;
	
	@Column(name="sallary",length=19L,type=java.sql.Types.BIGINT,nullable=false)
	protected BigInteger sallary;
	


	/** default constructor */
	public AbstractTestVO() {
	}
	


	/** full constructor */
	public AbstractTestVO(Boolean id,String name,BigInteger sallary)
	{
		this.id=id;
		this.name=name;
		this.sallary=sallary;
	}
	
	/**
	 *@param id the id to set
	 */
	public AbstractTestVO setId(Boolean id) {
		this.id=id;
		return this;
	}
		
	/**
	 *@return the Id
	 */
	public Boolean getId() {
	    return this.id;
	}
	
	/**
	 *@param name the name to set
	 */
	public AbstractTestVO setName(String name) {
		this.name=name;
		return this;
	}
		
	/**
	 *@return the Name
	 */
	public String getName() {
	    return this.name;
	}
	
	/**
	 *@param sallary the sallary to set
	 */
	public AbstractTestVO setSallary(BigInteger sallary) {
		this.sallary=sallary;
		return this;
	}
		
	/**
	 *@return the Sallary
	 */
	public BigInteger getSallary() {
	    return this.sallary;
	}



	/**
     * @todo vo columns to String
     */
    @Override
	public String toString() {
		StringBuilder columnsBuffer=new StringBuilder();
		columnsBuffer.append("id=").append(getId()).append("\n");
		columnsBuffer.append("name=").append(getName()).append("\n");
		columnsBuffer.append("sallary=").append(getSallary()).append("\n");
		return columnsBuffer.toString();
	}
}
